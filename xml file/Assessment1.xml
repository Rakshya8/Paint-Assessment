<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assessment1</name>
    </assembly>
    <members>
        <member name="T:Assessment1.BasicDrawing">
            <summary>
            Process drawing commands
            </summary>
        </member>
        <member name="M:Assessment1.BasicDrawing.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="P:Assessment1.BasicDrawing.GetInstance">
            <summary>
            static instance of itself.
            </summary>
        </member>
        <member name="M:Assessment1.BasicDrawing.SetBasicDrawing(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32[])">
            <summary>
            sets properties of shapes
            </summary>
            <param name="Draw">contains shape command</param>
            <param name="color">color of shape</param>
            <param name="fillshape">fill shape</param>
            <param name="flash">check ft flash</param>
            <param name="list">contains x-axis, y-axis and shape size parameters</param>
        </member>
        <member name="M:Assessment1.BasicDrawing.getShape">
            <summary>
            To return the shape commands stored in arraylist
            </summary>
            <returns>list of valid shape commands</returns>
        </member>
        <member name="T:Assessment1.Check_Valid_Commands">
            <summary>
            Check if given commands are valid
            </summary>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="P:Assessment1.Check_Valid_Commands.GetInstance">
            <summary>
            static instance of itself.
            </summary>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.clear_list">
            <summary>
            clear error list, variables, method
            </summary>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.clear_error">
            <summary>
            clear error list
            </summary>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.Valid_execute_command(System.String)">
            <summary>
            Check for valid execution commands
            </summary>
            <param name="command">executing command</param>
            <returns>true if valid and false if invalid</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_command_type(System.String)">
            <summary>
            check type of command
            </summary>
            <param name="cmd">command to be checked</param>
            <returns>type of command</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_variable(System.String)">
            <summary>
            Check validitiy of complex commands
            </summary>
            <param name="command">command to be checked</param>
            <returns></returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_variable_operation(System.String)">
            <summary>
            check variable operations validity
            </summary>
            <param name="cmd">command to be checked</param>
            <returns>true if variable exist else false</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_if_command(System.String)">
            <summary>
            Check validity of if command
            </summary>
            <param name="command">command to be checked</param>
            <returns>true if command is valid else false</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.getOperator">
            <summary>
            get if condition operator
            </summary>
            <returns>operator used in if command</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_loop(System.String)">
            <summary>
            check loop command validity
            </summary>
            <param name="command">command to be checked</param>
            <returns>true if command is valid else false</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_method(System.String)">
            <summary>
            check validity of method command
            </summary>
            <param name="command">command to be checked</param>        
            <returns>true if command is valid else false</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.check_methodcall(System.String)">
            <summary>
            check vadility of method call command
            checks if method exist or not
            </summary>
            <param name="command">method containing command</param>
            <returns>returns true if valid and false if invalid</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.Check_command(System.String)">
            <summary>
            Check for valid program commands
            </summary>
            <param name="command">program commands</param>
            <returns>true if valid and false if invalid</returns>
        </member>
        <member name="M:Assessment1.Check_Valid_Commands.error_list">
            <summary>
            Stores list of errors found during command validation
            </summary>
            <returns>returns list of errors</returns>
        </member>
        <member name="T:Assessment1.ComplexDrawing">
            <summary>
            Contains If, Loop and Method command execution
            </summary>
        </member>
        <member name="P:Assessment1.ComplexDrawing.GetInstance">
            <summary>
            if instance is null then create a new object of class
            </summary>
        </member>
        <member name="M:Assessment1.ComplexDrawing.getMethodSignature">
            <summary>
            Collection of key/pair i.e. name/parameter.count
            </summary>
            <returns>method signatures</returns>
        </member>
        <member name="M:Assessment1.ComplexDrawing.Clear_list">
            <summary>
            Clear methods, variables
            </summary>
        </member>
        <member name="M:Assessment1.ComplexDrawing.run_if_command(System.String,System.String[],System.Int32,Assessment1.Form1)">
            <summary>
            execute if command
            </summary>
            <param name="Draw">if command line</param>
            <param name="lines">all commands entered by user</param>
            <param name="line_found_in">if command found line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:Assessment1.ComplexDrawing.run_loop_command(System.String,System.String[],System.Int32,Assessment1.Form1)">
            <summary>
            execute loop command
            </summary>
            <param name="Draw">loop command line</param>
            <param name="lines">all commands entered by user</param>
            <param name="loop_found_in_line">loop command found line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:Assessment1.ComplexDrawing.run_method_command(System.String,System.String[],System.Int32,Assessment1.Form1)">
            <summary>
            execute method command
            </summary>
            <param name="Draw">method command line</param>
            <param name="lines">all commands entered by user</param>
            <param name="method_found_in_line">loop command found line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:Assessment1.ComplexDrawing.run_method_call(System.String,Assessment1.Form1)">
            <summary>
            Execute method call command
            </summary>
            <param name="Draw">method call line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:Assessment1.ComplexDrawing.getVariables">
            <summary>
            To get the variables
            </summary>
            <returns>variables and their values</returns>
        </member>
        <member name="M:Assessment1.ComplexDrawing.run_variable_command(System.String)">
            <summary>
            Execute variable command
            </summary>
            <param name="Draw">variable line</param>
        </member>
        <member name="M:Assessment1.ComplexDrawing.runVariableOperation(System.String,Assessment1.Form1)">
            <summary>
            Execute variable operation
            </summary>
            <param name="line">variable operation line</param>
            <param name="fm">Object of Form1</param>
            <returns>true if operation run successfully otherwise false</returns>
        </member>
        <member name="T:Assessment1.InvalidVariableNameException">
            <summary>
            invalid variable name exception
            </summary>
        </member>
        <member name="M:Assessment1.InvalidVariableNameException.#ctor(System.String)">
            <summary>
            invalid variable name exception 
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Assessment1.InvalidCommandException">
            <summary>
            invalid command exception 
            </summary>
        </member>
        <member name="M:Assessment1.InvalidCommandException.#ctor(System.String)">
            <summary>
            invalid command exception 
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Assessment1.InvalidParameterException">
            <summary>
            invalid parameter exception
            </summary>
        </member>
        <member name="M:Assessment1.InvalidParameterException.#ctor(System.String)">
            <summary>
            invalid parameter exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Assessment1.VariableNotFoundException">
            <summary>
            variable not found exception
            </summary>
        </member>
        <member name="M:Assessment1.VariableNotFoundException.#ctor(System.String)">
            <summary>
            variable not found exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Assessment1.InvalidMethodNameException">
            <summary>
            invalid method name
            </summary>
        </member>
        <member name="M:Assessment1.InvalidMethodNameException.#ctor(System.String)">
            <summary>
            invalid method name
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Assessment1.MethodNotFoundException">
            <summary>
            method not found exception
            </summary>
        </member>
        <member name="M:Assessment1.MethodNotFoundException.#ctor(System.String)">
            <summary>
            method not found exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Assessment1.Polygon">
            <summary>
            Class Polygon inherits base class Shape
            </summary>
        </member>
        <member name="M:Assessment1.Polygon.#ctor">
            <summary>
            Call base class constructor
            </summary>
        </member>
        <member name="M:Assessment1.Polygon.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Overloading Constructor and call overloaded base constructor
            </summary>
            <param name="color">Color Of Pen</param>
            <param name="fillshape">Inner Fill Shapes</param>
            <param name="x">X-axis Coordinate</param>
            <param name="y">Y-axis Coordinate</param>
            <param name="points">polygon points</param>
        </member>
        <member name="M:Assessment1.Polygon.Set(System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            New implementation of Set method that is inherited from a base class.
            </summary>
            <param name="colour">Color of pen</param>
            <param name="fill">Inner fill shapes</param>
            <param name="list">stores number of arguments</param>
        </member>
        <member name="M:Assessment1.Polygon.Draw(System.Drawing.Graphics)">
            <summary>
            New implementation of Draw method that is inherited from a base class.
            </summary>
            <param name="g">GDi+ Drawing surface</param>
        </member>
        <member name="T:Assessment1.Shape">
            <summary>
            Abstract class Shape which declares the factory method
            </summary>
        </member>
        <member name="M:Assessment1.Shape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Assessment1.Shape.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Overloading constructor with parameters
            </summary>
            <param name="colour">Color Of Pen</param>
            <param name="fillshape">Inner Fill Shapes</param>
            <param name="x">X-axis Coordinate</param>
            <param name="y">Y-axis Coordinate</param>
        </member>
        <member name="M:Assessment1.Shape.Draw(System.Drawing.Graphics)">
            <summary>
            Draw shape on panel
            </summary>
            <param name="g">GDI+ Drawing Surface</param>
        </member>
        <member name="M:Assessment1.Shape.Set(System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            Override set method derived from base class
            </summary>
            <param name="colour">Color of pen</param>
            <param name="fillshape">Inner fill shapes</param>
            <param name="list">stores number of arguments</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Assessment1.Shape.Set(System.Drawing.Color,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32[])" -->
        <member name="T:Assessment1.Circle">
            <summary>
            Class Circle inherits base class Shape
            </summary>
        </member>
        <member name="M:Assessment1.Circle.#ctor">
            <summary>
            Call base class constructor
            </summary>
        </member>
        <member name="M:Assessment1.Circle.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overloading Constructor and call overloaded base constructor
            </summary>
            <param name="color">Color Of Pen</param>
            <param name="fillshape">Inner Fill Shapes</param>
            <param name="x">X-axis Coordinate</param>
            <param name="y">Y-axis Coordinate</param>
            <param name="radius">Radius Of Circle</param>
        </member>
        <member name="M:Assessment1.Circle.Set(System.Drawing.Color,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32[])">
            <summary>
            New implementation of Set method that is inherited from a base class.
            </summary>
            <param name="colour">Color of pen</param>
            <param name="fill">Inner fill shapes</param>
            <param name="list">stores number of arguments</param>
        </member>
        <member name="M:Assessment1.Circle.Draw(System.Drawing.Graphics)">
            <summary>
            New implementation of Draw method that is inherited from a base class.
            </summary>
            <param name="g">GDi+ Drawing surface</param>
        </member>
        <member name="T:Assessment1.Form1">
            <summary>
            Form1 class inherits from the base class Form
            </summary>
        </member>
        <member name="M:Assessment1.Form1.#ctor">
            <summary>
            Default Constructor to instantiate values of form
            </summary>
        </member>
        <member name="M:Assessment1.Form1.textBox3_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event triggered on pressing any key while focused on this textbox
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.draw_commands(System.String)">
            <summary>
            Basic drawing commands are executed here
            </summary>
            <param name="Draw">command to be executed</param>
        </member>
        <member name="M:Assessment1.Form1.RotateShape">
            <summary>
            Stores degree of rotation
            </summary>
            <returns>degree of rotation</returns>
        </member>
        <member name="M:Assessment1.Form1.panel1_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint Event of panel1
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.saveToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Opens a save dialog to save commands into a text format document
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.loadToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Opens a open dialog to read text file and show commands
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.commandListToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Shows list of program commands available
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.colorListToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Shows list of color options available
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.shapeListToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Shows list of shapes commands available
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.actionListToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Shows list of executing commands available
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.textBox2_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Indicates that the event handler has already processed the event and dealt with it, so it doesn't need to be processed any further.
            Disables user input for this textbox.
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.ifLoopMethodCmdsToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Shows list of executing loop commands available
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.saveToolStripMenuItem1_Click(System.Object,System.EventArgs)">
            <summary>
            Opens a save dialog to save commands into a text format document
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.loadToolStripMenuItem1_Click(System.Object,System.EventArgs)">
            <summary>
            Opens a open dialog to read text file and show commands
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.loadToolStripMenuItem_Click_1(System.Object,System.EventArgs)">
            <summary>
            Shows About of the Program
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.exitToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Exits the Program
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="M:Assessment1.Form1.newToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Clears the Program
            </summary>
            <param name="sender">contains a reference to the control/object that raised the event.</param>
            <param name="e">contains the event data</param>
        </member>
        <member name="F:Assessment1.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Assessment1.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Assessment1.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Assessment1.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Assessment1.Rectangle">
            <summary>
            Class Rectangle inherits base class Shape
            </summary>
        </member>
        <member name="M:Assessment1.Rectangle.#ctor">
            <summary>
            Call base class constructor
            </summary>
        </member>
        <member name="M:Assessment1.Rectangle.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overloading Constructor and call overloaded base constructor
            </summary>
            <param name="color">Color Of Pen</param>
            <param name="fillshape">Inner Fill Shapes</param>
            <param name="x">X-axis Coordinate</param>
            <param name="y">Y-axis Coordinate</param>
            <param name="length">Length of Rectangle</param>
            <param name="width">Width of Rectangle</param>
        </member>
        <member name="M:Assessment1.Rectangle.Set(System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            New implementation of Set method that is inherited from a base class.
            </summary>
            <param name="color">Color of pen</param>
            <param name="fill">Inner fill shapes</param>
            <param name="list">stores number of arguments</param>
        </member>
        <member name="M:Assessment1.Rectangle.Draw(System.Drawing.Graphics)">
            <summary>
            New implementation of Draw method that is inherited from a base class.
            </summary>
            <param name="g">GDi+ Drawing surface</param>
        </member>
        <member name="T:Assessment1.ShapeFactory">
            <summary>
            Class ShapeFactory controls the type of shape object to create
            </summary>
        </member>
        <member name="M:Assessment1.ShapeFactory.getShape(System.String)">
            <summary>
            check user requirement for shape and return that shape
            </summary>
            <param name="shapeType">Shape of object</param>
            <returns>type of shape required</returns>
        </member>
        <member name="T:Assessment1.IShapes">
            <summary>
            The Shape interface
            </summary>
        </member>
        <member name="M:Assessment1.IShapes.Set(System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            Set properties of shape
            </summary>
            <param name="c">Color of pen</param>
            <param name="fillshape">Inner fill shapes</param>
            <param name="list">stores number of arguments</param>
        </member>
        <member name="M:Assessment1.IShapes.Draw(System.Drawing.Graphics)">
            <summary>
            Draw shape in panel
            </summary>
            <param name="g">GDI+ Drawing Surface</param>
        </member>
        <member name="T:Assessment1.Triangle">
            <summary>
            Class Traingle inherits base class Shape
            </summary>
        </member>
        <member name="M:Assessment1.Triangle.#ctor">
            <summary>
            Call base class constructor
            </summary>
        </member>
        <member name="M:Assessment1.Triangle.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overloading Constructor and call overloaded base constructor
            </summary>
            <param name="color">Color Of Pen</param>
            <param name="fillshape">Inner Fill Shapes</param>
            <param name="x">X-axis Coordinate</param>
            <param name="y">Y-axis Coordinate</param>
            <param name="a">Side1 of Traingle</param>
            <param name="b">Side2 of Traingle</param>
            <param name="c">Side3 of Traingle</param>
        </member>
        <member name="M:Assessment1.Triangle.Set(System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            New implementation of Set method that is inherited from a base class.
            </summary>
            <param name="colour">Color of pen</param>
            <param name="fill">Inner fill shapes</param>
            <param name="list">stores number of arguments</param>
        </member>
        <member name="M:Assessment1.Triangle.Draw(System.Drawing.Graphics)">
            <summary>
            New implementation of Draw method that is inherited from a base class.
            </summary>
            <param name="g">GDi+ Drawing surface</param>
        </member>
        <member name="T:Assessment1.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Assessment1.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Assessment1.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
